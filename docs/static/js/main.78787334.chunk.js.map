{"version":3,"sources":["pages/CounterPage.js","App.js","serviceWorker.js","index.js"],"names":["Count","props","name","value","react_default","a","createElement","className","CounterPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onText","event","setState","text","target","state","characterCount","length","wordCount","match","alphabeticCount","whitespaceCount","onChange","Component","App","id","CounterPage_CounterPage","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAGA,SAASA,EAAMC,GAAO,IACZC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcL,EAA9B,MACAE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,QAKhBK,cACnB,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KAKRe,OAAS,SAACC,GACRR,EAAKS,SAAS,CACZC,KAAMF,EAAMG,OAAOjB,SANrBM,EAAKY,MAAQ,CACXF,KAAM,IAHSV,wEAWV,IACCU,EAASP,KAAKS,MAAdF,KACFG,EAAiBH,EAAKI,OACtBC,GAAaL,EAAKM,MAAM,WAAa,IAAIF,OACzCG,GAAmBP,EAAKM,MAAM,YAAc,IAAIF,OAChDI,GAAmBR,EAAKM,MAAM,QAAU,IAAIF,OAClD,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACN,EAAD,CAAOE,KAAK,aAAaC,MAAOmB,IAChClB,EAAAC,EAAAC,cAACN,EAAD,CAAOE,KAAK,QAAQC,MAAOqB,IAC3BpB,EAAAC,EAAAC,cAACN,EAAD,CAAOE,KAAK,aAAaC,MAAOwB,IAChCvB,EAAAC,EAAAC,cAACN,EAAD,CAAOE,KAAK,eAAeC,MAAOuB,KAEpCtB,EAAAC,EAAAC,cAAA,YAAUH,MAAOS,KAAKS,MAAMF,KAAMS,SAAUhB,KAAKI,iBA3BhBa,aCQ1BC,0LAfX,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,aAGAH,EAAAC,EAAAC,cAAA,OAAKyB,GAAG,gBACN3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAC0B,EAAD,gBATMH,cCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78787334.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CounterPage.css';\n\nfunction Count(props) {\n  const { name, value } = props;\n  return (\n    <div className=\"count\">\n      <span className=\"count-name\">{name}: </span>\n      <span className=\"count-value\">{value}</span>\n    </div>\n  )\n}\n\nexport default class CounterPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    };\n  }\n  onText = (event) => {\n    this.setState({\n      text: event.target.value\n    });\n  }\n  render() {\n    const { text } = this.state;\n    const characterCount = text.length;\n    const wordCount = (text.match(/(\\w+)/g) || []).length;\n    const alphabeticCount = (text.match(/[a-z]/gi) || []).length;\n    const whitespaceCount = (text.match(/\\s/g) || []).length;\n    return (\n      <div className=\"CounterPage\">\n        <h1>Text Counter</h1>\n        <div className=\"count-row\">\n          <Count name=\"Characters\" value={characterCount} />\n          <Count name=\"Words\" value={wordCount} />\n          <Count name=\"Whitespace\" value={whitespaceCount} />\n          <Count name=\"Alphanumeric\" value={alphabeticCount} />\n        </div>\n        <textarea value={this.state.text} onChange={this.onText} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport CounterPage from './pages/CounterPage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Web Tools\n        </header>\n        <div id=\"page-content\">\n          <div className=\"content-container\">\n            <CounterPage />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}